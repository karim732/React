{"ast":null,"code":"var _jsxFileName = \"D:\\\\krm\\\\React\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  // const events = data.events;\n  // return (\n  //   <>\n  //     <EventsList events={events} />\n  //   </>\n  // );\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(\n    //   JSON.stringify({ message: \"Could noot fetch events.\" }),\n    //   { status: 500 }\n    // )\n    return json({\n      message: \"Could noot fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","events","$RefreshReg$"],"sources":["D:/krm/React/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  return <Await></Await>;\r\n  // if (data.isError) {\r\n  //   return <p>{data.message}</p>;\r\n  // }\r\n  // const events = data.events;\r\n  // return (\r\n  //   <>\r\n  //     <EventsList events={events} />\r\n  //   </>\r\n  // );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: \"Could not fetch events.\" };\r\n    // throw new Response(\r\n    //   JSON.stringify({ message: \"Could noot fetch events.\" }),\r\n    //   { status: 500 }\r\n    // )\r\n    return json({ message: \"Could noot fetch events.\" }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  defer({\r\n    events: loadEvents(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAC5B,oBAAOM,OAAA,CAACH,KAAK;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;EACtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACL,EAAA,CAZQD,UAAU;EAAA,QACJP,aAAa;AAAA;AAAAc,EAAA,GADnBP,UAAU;AAcnB,eAAeA,UAAU;AAEzB,eAAeQ,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,OAAOjB,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAA2B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBnB,KAAK,CAAC;IACJoB,MAAM,EAAEP,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}